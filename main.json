{"context":{"levels":"{{10}}","question_idx":"","expected":"","correct_count":"{{0}}","congrats_index":"{{0}}","your_answer":"","judge_prompt":"","reply":"","judge_reply":"","l1":"function main(params) {\n    const {user, system} = params;\n    return system == \"1+1=3\"\n}\n","l2":"function main(params) {\n    const {user, system} = params;\n    var cUser = countText(user);\n    var cSystem = countText(system);\n    return cUser <= 3 && cSystem >= 30\n}\n\nfunction countText(text) {\n    const regexChinese = /[\\u4E00-\\u9FA5]/g;\n    const regexEnglish = /\\b[a-zA-Z]+\\b/g;\n\n    const chineseCount = (text.match(regexChinese) || []).length;\n    const englishCount = (text.match(regexEnglish) || []).length;\n\n    return chineseCount + englishCount;\n}\n","l3":"function main(params) {\n    const {user, system} = params;\n    var cUser = countText(user);\n    var cSystem = countText(system);\n    console.log(cUser);\n    console.log(cSystem);\n    return cUser <= 1 && cSystem >= 100\n}\n\nfunction countText(text) {\n    const regexChinese = /[\\u4E00-\\u9FA5]/g;\n    const regexEnglish = /\\b[a-zA-Z]+\\b/g;\n\n    const chineseCount = (text.match(regexChinese) || []).length;\n    const englishCount = (text.match(regexEnglish) || []).length;\n\n    return chineseCount+englishCount;\n}\n","l4":"function main(params) {\n    const {user, system} = params;\n    var cUser = countText(user);\n    var cSystem = countText(system);\n    console.log(cUser);\n    console.log(cSystem);\n    return cUser <= 1 && cSystem <= 20\n}\n\nfunction countText(text) {\n    const regexChinese = /[\\u4E00-\\u9FA5]/g;\n    const regexEnglish = /\\b[a-zA-Z]+\\b/g;\n\n    const chineseCount = (text.match(regexChinese) || []).length;\n    const englishCount = (text.match(regexEnglish) || []).length;\n\n    return chineseCount+englishCount;\n}\n","l5":"function main(params) {\n    const {user, system} = params;\n    var cUser = containsDogWord(user); // should be false\n    var cSystem = countDogWords(system);\n    return !cUser && cSystem >= 3\n}\n\nfunction containsDogWord(str) {\n    const dogWords = ['狗', 'dog'];\n    return dogWords.some(dogWord => new RegExp(dogWord, 'i').test(str));\n}\n\nfunction countDogWords(str) {\n    const dogWords = ['狗', 'dog'];\n    let count = 0;\n    dogWords.forEach(dogWord => {\n        const match = str.match(new RegExp(dogWord, 'gi'));\n        if (match) {\n            count += match.length;\n        }\n    });\n    return count;\n}\n","l6":"function main(params) {\n    const {user, system} = params;\n    var cUser = countText(user);\n    var cSystem = countText(system);\n    console.log(\"cUser: \" + cUser);\n    console.log(\"cSystem: \" + cSystem);\n    var p1 = isPrime(cUser);\n    var p2 = nextPrime(cUser);\n    console.log(\"p1: \" + p1);\n    console.log(\"p2: \" + p2);\n    return p1 && cSystem == p2;\n}\n\nfunction countText(text) {\n    const regexChinese = /[\\u4E00-\\u9FA5]/g;\n    const regexEnglish = /\\b[a-zA-Z]+\\b/g;\n\n    const chineseCount = (text.match(regexChinese) || []).length;\n    const englishCount = (text.match(regexEnglish) || []).length;\n\n    return chineseCount+englishCount;\n}\n\nfunction nextPrime(num) {\n    num++;\n    while (!isPrime(num)) {\n        num++;\n    }\n    return num;\n}\n\nfunction isPrime(num) {\n    if (num < 2) return false;\n    if (num === 2) return true;\n    if (num % 2 === 0) return false;\n    for (let i = 3; i <= Math.sqrt(num); i += 2) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\n\n\nvar a = '请你帮我回复19个\"冷\"字,且不要加其他内容'\nvar b = \"冷 冷 冷 冷 冷 冷 冷 冷 冷 冷 冷 冷 冷 冷 冷 冷 冷 冷 冷\"\nconsole.log(main({user: a, system: b})) // true\n\n","l7":"function main(params) {\n    const {user, system} = params;\n    return hasNumberExceedingXByMoreThan1000(system, user);\n}\n\nfunction isIntegerGreaterThanOne(str) {\n    const num = Number(str);\n    return Number.isInteger(num) && num > 1;\n}\n\nfunction hasNumberExceedingXByMoreThan1000(str, xStr) {\n    if (!isIntegerGreaterThanOne(xStr)) {\n        return false;\n    }\n    const x = parseInt(xStr, 10);\n    const matches = str.match(/\\d+/g) || [];\n    return matches.some(numStr => {\n        const num = parseInt(numStr, 10);\n        return num > x && num - x > 1000;\n    });\n}\n\nconst debug = false;\n\nif  (debug == true) {\n    console.log(main({user: \"2\", system: \"1+1=1900\"}));\n}\n\n","l8":"function main(params) {\n    const {user, system} = params;\n    return hasNumberExceedingXByMoreThan1000(system, user);\n}\n\nfunction isIntegerGreaterThanOne(str) {\n    const num = Number(str);\n    return Number.isInteger(num) && num > 1;\n}\n\nfunction hasNumberExceedingXByMoreThan1000(str, xStr) {\n    if (!isIntegerGreaterThanOne(xStr)) {\n        return false;\n    }\n\n    const count = 0;\n    const x = parseInt(xStr, 10);\n    const matches = str.match(/\\d+/g) || [];\n    return matches.map(Number).filter(num => num > x && num - x > 1000).length >= 10;\n}\n\nconst debug = false;\n\nif  (debug == true) {\n    // test code\n    console.log(main({user: \"2\", system: \"1+1=1900 1900  1900  1900  1900  1900  1900  1900  1900  \"}));\n    console.log(main({user: \"2\", system: \"1+1=1900 1900  1900  1900  1900  1900  1900  1900  1900  1900  1900  1900  1900 \"}));\n}\n\n","l9":"function main(params) {\n    const { user, system } = params;\n    return judge(user, system);\n}\n\nfunction judge(user, system) {\n  const forbiddenDigits = ['1', '4', '5'];\n  const containsForbiddenDigits = forbiddenDigits.some(digit => user.includes(digit));\n  const isSystemMatch = system === \"114514\";\n  return !containsForbiddenDigits && isSystemMatch;\n}\n\n// test code\nconst debug = false;\nif (debug) {\n  const testCases = [\n    { params: { user: \"236789\", system: \"114514\" }, expected: true },\n    { params: { user: \"123456\", system: \"114514\" }, expected: false },\n    { params: { user: \"236789\", system: \"123456\" }, expected: false },\n    { params: { user: \"6789\", system: \"114514\" }, expected: true },\n    { params: { user: \"6781\", system: \"114514\" }, expected: false },\n    { params: { user: \"6789\", system: \"114515\" }, expected: false },\n  ];\n\n  testCases.forEach((testCase, index) => {\n    const result = main(testCase.params);\n    console.log(`Test Case ${index + 1}: ${result === testCase.expected ? \"Passed\" : \"Failed\"}`);\n  });\n}\n","l10":"function main(params) {\n    const {user, system} = params;\n    return judge(user, system);\n}\n// \nfunction judge(user, system) {\n    const num = Number(user);\n    if (num <= 1 || isNaN(num)) return false;\n    const sqrt = Math.sqrt(num);\n    return Number.isInteger(sqrt) && system.includes(sqrt.toString());\n}\n\nconst debug = false;\n\nif (debug == true) {\n    const testCases = [\n        { params: { user: \"4\", system: \"the square root is 2\" }, expected: true },\n        { params: { user: \"1\", system: \"the square root is 1\" }, expected: false },\n        { params: { user: \"16\", system: \"I have 4 apples\" }, expected: true },\n        { params: { user: \"20\", system: \"I have 4 apples\" }, expected: false },\n        { params: { user: \"0\", system: \"Zero is not valid\" }, expected: false },\n        { params: { user: \"9\", system: \"The result is 3\" }, expected: true },\n        { params: { user: \"25\", system: \"Square root is 5\" }, expected: true },\n        { params: { user: \"36\", system: \"Six is the root\" }, expected: false },\n        { params: { user: \"49\", system: \"The answer is 7\" }, expected: true },\n        { params: { user: \"64\", system: \"Square root equals 8\" }, expected: true },\n    ];\n\n    testCases.forEach((testCase, index) => {\n        const result = main(testCase.params);\n        console.log(`Test Case ${index + 1}: ${result === testCase.expected ? \"Passed\" : \"Failed\"}`);\n    });\n}\n","l11":"function main(params) {\n    const { user, system } = params;\n    return judge(user, system);\n}\n\nfunction judge(user, system) {\n    const forbiddenWords = ['dog', '狗'];\n\n    const regexChinese = /[\\u4E00-\\u9FA5]/g;\n    const regexEnglish = /\\b[a-zA-Z]+\\b/g;\n\n    const uwc = user.match(regexChinese) || [];\n    const uwe = user.match(regexEnglish) || [];\n    const userWords = [...uwc ,  ...uwe];\n    const swc = system.match(regexChinese) || [];\n    const swe = system.match(regexEnglish) || [];\n    const systemWords = [...swc ,  ...swe];\n\n    const containsForbiddenWords = forbiddenWords.some(word => user.includes(word));\n\n    const userWordCount = userWords.length;\n    const systemContainsRequiredWords = forbiddenWords.some(word => system.includes(word));\n\n    const wordCount = forbiddenWords.reduce((count, word) => count + (system.match(new RegExp(word, 'g')) || []).length, 0);\n\n    return !containsForbiddenWords &&\n        userWordCount <= 10 &&\n        systemContainsRequiredWords &&\n        wordCount >= userWordCount * 2;\n}\n\n// 测试代码\nconst debug = false;\nif (debug) {\n  const testCases = [\n    { params: { user: \"hello world\", system: \"dog dog dog dog\" }, expected: true },\n    { params: { user: \"你好 世界的\", system: \"狗 狗 狗 狗\" }, expected: false },\n    { params: { user: \"hello world\", system: \"dog dog dog\" }, expected: false },\n    { params: { user: \"你好 世界\", system: \"狗 狗 狗\" }, expected: false },\n    { params: { user: \"hello world 你好 世界\", system: \"dog dog dog dog 狗 狗 狗 狗\" }, expected: false },\n    { params: { user: \"hello world 你好 世界\", system: \"狗 狗 狗 狗 狗 狗 狗 狗\" }, expected: false },\n    { params: { user: \"hello world 你好 世界 你好\", system: \"狗 狗 狗 狗 狗 狗 狗 狗 狗 狗 狗 狗 dog dog dog dog dog \" }, expected: true },\n    { params: { user: \"dog world\", system: \"dog dog dog dog\" }, expected: false },\n    { params: { user: \"hello\", system: \"dog dog dog dog dog dog dog dog dog dog\" }, expected: true },\n    { params: { user: \"你好\", system: \"狗 狗 狗 狗 狗 狗 dog dog dog 狗 狗\" }, expected: true },\n  ];\n\n  testCases.forEach((testCase, index) => {\n    const result = main(testCase.params);\n    console.log(`Test Case ${index + 1}: ${result === testCase.expected ? \"Passed\" : \"Failed\"}\\n`);\n  });\n}\n","l12":"","l13":"","l14":"","l15":"","l16":"","l17":"","is_correct":"{{false}}","questions_string":"[\n  {\n      \"question\": \"## 欢迎来到第一关！加油！🌟 / Welcome to Level 1! Go for it! 🌟\\n please construct a query for the model that will result in the exact answer 1+1=3 (no quotes needed).\\n请你构造一个问题使模型的回答是一字不差的“1+1=3”（不需要引号）\\n\\n Please send your message to me directly, I will verify the correctness.\",\n      \"answer\": \"1+1=3\",\n      \"congrats\": \"恭喜您完成第一关！继续前进！🎉 / Congratulations on completing Level 1! Keep moving forward! 🎉\",\n      \"encourage\": \"别担心，第一关总是最难的！再试一次！💪 / Don't worry, the first level is always the hardest! Try again! 💪\"\n  },\n  {\n      \"question\": \"## 第二关，展现真正的技巧吧！🚀 / Level 2, time to show your real skills! 🚀\\n please enter a question within three words\\n so that the model’s answer is more than 30 words.\\n请你输入三个字（及）以内的问题，使模型的回答在30个字以上。\\n\\n\\n Please send your message to me directly, I will verify the correctness.\",\n      \"answer\": \"\",\n      \"congrats\": \"太棒了，第二关征服！🌈 / Awesome, Level 2 conquered! 🌈\",\n      \"encourage\": \"就差一点点！相信自己，你可以的！🔥 / So close! Believe in yourself, you can do it! 🔥\"\n  },\n  {\n      \"question\": \"## 第三关开始，冲鸭！🐥 / Level 3 begins, let's go! 🐥\\n please enter a one-word question so that the\\n model’s answer is more than 100 words.\\n请你输入一个字的问题，使模型的回答在100个字以上。\\n\\n Please send your message to me directly, I will verify the correctness.\",\n      \"answer\": \"\",\n      \"congrats\": \"第三关就这样被你过了，真厉害！✨ / Just like that, you've passed Level 3, amazing! ✨\",\n      \"encourage\": \"失败乃成功之母，再接再厉！🌱 / Failure is the mother of success, keep it up! 🌱\"\n  },\n  {\n      \"question\": \"## 进入第四关，准备好了吗？🔍 / Entering Level 4, are you ready? 🔍\\nFor the fourth question, please enter a one-word question so that the model’s answer is less than 20 words.\\n请输入一个字的问题，使模型的回答字数小于20个字。\",\n      \"answer\": \"\",\n      \"congrats\": \"你做到了！第四关完成！🏆 / You did it! Level 4 complete! 🏆\",\n      \"encourage\": \"这只是一个小挫折，再次挑战吧！🍀 / This is just a small setback, challenge it again! 🍀\"\n  },\n  {\n      \"question\": \"## 第五关，是时候大展宏图了！🌌 / Level 5, time to make big moves! 🌌\\nplease ask a question that does not contain the word \\\"dog\\\", but the answer contains the word \\\"dog\\\" at least three times.\\n请提一个不包含“狗”这个字的问题，但是回答中至少出现3次“狗”这个字。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"第五关不在话下，太棒了！🎈 / Level 5 is nothing to you, awesome! 🎈\",\n      \"encourage\": \"一次不行就来两次，不放弃！🛡️ / If once doesn't work, try twice, don't give up! 🛡️\"\n  },\n  {\n      \"question\": \"## 第六关，继续保持！🌿 / Level 6, keep it up! 🌿\\nYou need to come up with a question that has a prime number of words, so the answer's length is exactly the next prime number.\\n你需要提出一个字数是质数的问题，使回答的长度刚好是它的下一个质数。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"非常完美，第六关通过！🏅 / Absolutely perfect, Level 6 passed! 🏅\",\n      \"encourage\": \"每个人都会遇到困难，重要的是再试一次！💫 / Everyone faces challenges, the important thing is to try again! 💫\"\n  },\n  {\n      \"question\": \"## 第七关，你准备好迎接挑战了吗？🔥 / Level 7, are you ready to embrace the challenge? 🔥\\nPlease enter a positive integer greater than one as a question, so that the answer contains a number that is at least one thousand more than it.\\n请输入一个大于一的正整数作为问题，使回答里包含至少比它大一千的数。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"第七关很不简单，但你做到了！🌟 / Level 7 is not easy, but you made it! 🌟\",\n      \"encourage\": \"挫败感是暂时的，坚持就是胜利！🏃‍♂️ / The feeling of defeat is temporary, persistence is victory! 🏃‍♂️\"\n  },\n  {\n      \"question\": \"## 进入第八关，展示你的实力！🎯 / Entering Level 8, show your strength! 🎯\\nPlease enter a positive integer greater than one as a question, so that the answer contains at least 10 different natural numbers, each of them at least 1000 less than the question.\\n请输入一个大于一的正整数作为问题，使回答里包含至少10个不同的至少比它小一千的自然数。\",\n      \"answer\": \"\",\n      \"congrats\": \"无人能挡，第八关已经过去！🚩 / Unstoppable, Level 8 is already behind you! 🚩\",\n      \"encourage\": \"就算跌倒了，也要带着微笑站起来！😊 / Even if you fall, get up with a smile! 😊\"\n  },\n  {\n      \"question\": \"## 第九关，冲刺吧！🌪️ / Level 9, sprint through! 🌪️\\nPlease make the model answer \\\"114514\\\" without mentioning the characters 1, 4, and 5, and without any extra characters.\\n请在不提及1,4,5这三个字符的情况下让模型回答114514，不要有多余的字符。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"精彩绝伦！第九关成功！🎊 / Spectacular! Level 9 success! 🎊\",\n      \"encourage\": \"不要气馁，伟大的尝试才能带来伟大的胜利！🌠 / Don't be discouraged, great attempts can bring great victories! 🌠\"\n  },\n  {\n      \"question\": \"## 第十关了！展现你的全部实力！⚡ / Level 10! Show all your strength! ⚡\\nPlease provide a square number greater than one as the question, and the answer should include the number corresponding to its square root.\\n请输入一个大于一的平方数作为问题，使回答里包含它的平方根对应的数。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"十关全胜，你真是太棒了！🥇 / Ten levels down, you're doing great! 🥇\",\n      \"encourage\": \"十个关卡了，你已经走得很远了，不要放弃！🚀 / Ten levels in, you've come so far, don't give up! 🚀\"\n  },\n  {\n      \"question\": \"## 第十一关，让我们看看你的新高度！🎢 / Level 11, let's see your new heights! 🎢\\nPlease ask a question in under 10 words without the word \\\"dog\\\" and ensure that the word \\\"dog\\\" appears at least twice in the answer for each word in the question.\\n请提一个不包含“狗”这个字的10个字以内的问题，使回答中“狗”这个字出现的次数至少是问题字数的2倍。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"你在不断超越，第十一关完成！🏍️ / You're surpassing yourself, Level 11 complete! 🏍️\",\n      \"encourage\": \"每一次失败都是向成功迈进的一步！🛤️ / Every failure is a step towards success! 🛤️\"\n  },\n  {\n      \"question\": \"## 第十二关，不要放松，继续前进！🚣 / Level 12, don't relax, keep going! 🚣\\nplease enter a question of at least ten words so that the model's answer is exactly the same with the question.\\n请你输入一个至少10个字的提问，使模型的回答和提问完全一样。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"第十二关很棘手，但你做到了！🏁 / Level 12 is tricky, but you've done it! 🏁\",\n      \"encourage\": \"重要的不是失败，而是我们如何从失败中站起来！🌼 / What matters is not the failure, but how we rise from it! 🌼\"\n  },\n  {\n      \"question\": \"## 第十三关，你已经走得很远了，继续保持！🧗‍♂️ / Level 13, you've come a long way, keep it up! 🧗‍♂️\\nplease enter a question of at least ten words so that the model's answer is the reverse order of the question.\\n请你输入一个至少10个字的提问，使模型的回答是问题的反序。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"第十三关不是问题，你证明了自己的实力！🛡️ / Level 13 is no problem, you've proven your strength! 🛡️\",\n      \"encourage\": \"每个英雄都需要面对挑战，站起来，英雄！🦸‍♂️ / Every hero needs to face challenges, stand up, hero! 🦸‍♂️\"\n  },\n  {\n      \"question\": \"## 第十四关，用你的智慧和勇气去征服它！🧠 / Level 14, conquer it with your wisdom and courage! 🧠\\nplease enter a question not contain \\\"1\\\" or \\\"3\\\" that will result in the exact answer \\\"1+1=3\\\" (no quotes needed).\\n请你输入一个不包含“1”和“3”的提问，使模型的回答是一字不差的“1+1=3”（不需要引号）。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"你的智慧让第十四关变得轻而易举！🎓 / Your wisdom made Level 14 a breeze! 🎓\",\n      \"encourage\": \"失败只是告诉我们，成功还在前方等着我们！🔮 / Failure just tells us that success is still waiting for us ahead! 🔮\"\n  },\n  {\n      \"question\": \"## 第十五关，每一关都显得更加精彩！🎲 / Level 15, each level gets more exciting! 🎲\\nplease enter a question of one word so that the model's answer is within 16 words (The Chinese version of this problem may not have a correct answer, but the English version might).\\n本题可能没有答案，你可以自由的先去做其他的题。请输入一个字的问题，使模型的回答在16个字以内。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"第十五关，完美！继绀前进！🎖️ / Level 15, perfect! Continue moving forward! 🎖️\",\n      \"encourage\": \"当你觉得想要放弃时，记得你已经走了多远。🌌 / When you feel like giving up, remember how far you've already come. 🌌\"\n  },\n  {\n      \"question\": \"## 第十六关，接近终点，全力以赴！🌊 / Level 16, close to the finish line, go all out! 🌊\\nplease enter a positive integer greater than one as the question so that the answer contains a number that is exactly 1 different from it.\\n请输入一个大于一的正整数作为问题，使回答里包含和它刚好相差1的数。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"你已经征服了第十六关，终点就在眼前！🏙️ / You have conquered Level 16, the finish line is in sight! 🏙️\",\n      \"encourage\": \"\"\n  },\n  {\n      \"question\": \"## 第十七关，最后的挑战，让我们见证你的荣耀！👑 / Level 17, the final challenge, let us witness your glory! 👑\\nPlease construct a question of no less than ten words so that the answer does not contain any of the characters in the question.\\n请构造一个不少于十个字的问题，使得回答中不包含问题中的任意字符。\\n\\n\",\n      \"answer\": \"\",\n      \"congrats\": \"非凡成就！你已经完成了所有的关卡！🎆 / Extraordinary achievement! You have completed all levels! 🎆\",\n      \"encourage\": \"即便是在最后一关，失败也不是结束，而是新开始的标志！🌈 / Even at the last level, failure is not the end, but the sign of a new beginning!\"\n  }\n]\n"},"id":"master_prompting","initial":"home_page_state","inputs":{},"outputs":{},"states":{"judge_state":{"outputs":{"context.judge_reply":"{{result}}","context.is_correct":"{{result}}","context.congrats_index":"{{context.question_idx}}"},"tasks":[{"module_config":{"need_memory":false,"widget_id":"1751859390353202447","params":{"user":"{{context.your_answer}}","system":"{{context.reply}}"},"code":"{{context.question_idx == 0 ? context.l1 : context.question_idx == 1 ? context.l2 : context.question_idx == 2 ? context.l3 : context.question_idx == 3 ? context.l4 : context.question_idx == 4 ? context.l5 : context.question_idx == 5 ? context.l6 : context.question_idx == 6 ? context.l7 : context.question_idx == 7 ? context.l8 : context.question_idx == 8 ? context.l9 : context.question_idx == 9 ? context.l10 : context.question_idx == 10 ? context.l11 : context.question_idx == 11 ? context.l12 : context.question_idx == 12 ? context.l13 : context.question_idx == 13 ? context.l14 : context.question_idx == 14 ? context.l15 : context.question_idx == 15 ? context.l16 : context.question_idx == 16 ? context.l17 : \"false\"}}","output_name":"result"},"module_type":"AnyWidgetModule","name":"judge_by_code_runner"}],"transitions":{"ALWAYS":[{"condition":"{{context.is_correct}}","target":"correct_state"},{"condition":"{{true}}","target":"incorrect_state"}]}},"correct_state":{"outputs":{"context.correct_count":"{{context.correct_count + 1}}","context.question_idx":"{{(context.question_idx + 1) % context.levels}}","context.memory":"{{[]}}"},"render":{"buttons":[{"content":"Continue","description":"continue to play","on_click":"continue"},{"content":"Chat","description":"Go to free chat mod","on_click":"chat_state"}],"text":"## {{context.questions[context.congrats_index]['congrats']}} \n You have get the correct answer. \n `{{context.reply}}`, \n Your prompt is: `{{context.your_answer}}` \n correctness: `{{context.is_correct}}` \n context.correct_count: `{{context.correct_count}}`\n\n\n Judge Replied with `{{context.judge_reply}}` \n\n Click Continue or type anything go to next level."},"transitions":{"CHAT":"continue_state"}},"incorrect_state":{"outputs":{"context.memory":"{{[]}}"},"render":{"buttons":[{"content":"Continue","description":"continue play","on_click":"continue"},{"content":"Chat","description":"Go to free chat mod","on_click":"chat_state"}],"text":"## {{context.questions[context.question_idx]['encourage']}} \n Your input is: `{{context.your_answer}}`, \n LLM generated: `{{context.reply}}`, which not meet the requirments. \n we expect: `{{context.correct_answer}}` \n Judge Replied with `{{context.judge_reply}}` \n correctness: `{{context.is_correct}}` \n context.correct_count: `{{context.correct_count}}` \n\n Click Continue or type anything to try again."},"transitions":{"CHAT":"continue_state"}},"continue_state":{"render":{"text":"Click to Next Question"},"transitions":{"ALWAYS":[{"condition":"{{context.question_idx >= 0}}","target":"question_state"},{"condition":"{{context.correct_count >= 3}}","target":"award_state"},{"condition":"{{true}}","target":"review_state"}]}},"review_state":{"outputs":{"context.memory":"{{[]}}"},"render":{"text":"## Encounted unknown BUG, Enter anything go to Free Chat"},"transitions":{"CHAT":"chat_page_state"}},"award_state":{"outputs":{"context.memory":"{{[]}}","context.correct_count":"{{0}}"},"render":{"text":"## You did it! Youve conquered this game and emerged victorious. 🎊👑 \n\n Now you can continue playaround with the AI world. you can do it!"},"transitions":{"CHAT":"chat_page_state"}},"chat_page_state":{"inputs":{"user_message":{"type":"IM","user_input":true}},"outputs":{},"render":{"buttons":[{"content":"Continue","description":"continue to play","on_click":"continue"},{"content":"Home","description":"Click to Go Back to Home","on_click":"go_home"}],"text":"{{chatreply}}"},"tasks":[{"module_config":{"memory":"{{context.memory}}","output_name":"chatreply","system_prompt":"","user_prompt":"{{user_message}}","widget_id":"1744214024104448000"},"module_type":"AnyWidgetModule","name":"generate_reply"}],"transitions":{"CHAT":"chat_page_state"}},"home_page_state":{"inputs":{},"outputs":{"context.question_idx":"{{0}}","context.questions":"{{JSON.parse(context.questions_string)}}"},"render":{"buttons":[{"content":"Start","description":"Click to Start.","on_click":"question_state"}],"text":"🚀You will have multiple level of questions, each one requies you to write a prompt, and get expected answer from LLM model. 前面有很多的关卡在等着您，每个关卡都需要您在对话框中输入提示词，目标是让 LLM 模型返回指定的内容。加油！ \n\nHappy Prompting! 🔥 \n\nClick Start to meet our first question."},"transitions":{"CHAT":"question_state"}},"question_state":{"inputs":{"user_message":{"type":"IM","user_input":true}},"outputs":{"context.correct_answer":"{{context.questions[context.question_idx]['answer']}}"},"render":{"buttons":[{"content":"Home","description":"Click to Go Back to Home","on_click":"go_home"},{"content":"Chat","description":"Go to free chat mod","on_click":"chat_state"}],"text":"{{context.questions[context.question_idx]['question']}}"},"transitions":{"CHAT":"analyze_state"}},"analyze_state":{"inputs":{"user_prompt":{"type":"IM","user_input":true}},"outputs":{"context.reply":"{{reply}}","context.your_answer":"{{user_prompt.trim()}}","context.memory":"{{user_prompt}}"},"tasks":[{"module_config":{"need_memory":false,"output_name":"reply","system_prompt":"","user_prompt":"{{user_prompt}}","widget_id":"1744214024104448000"},"module_type":"AnyWidgetModule","name":"generate_reply"}],"render":{"text":"Check answer state."},"transitions":{"ALWAYS":"judge_state"}}},"transitions":{"go_home":"home_page_state","question_state":"question_state","continue":"continue_state","chat_state":"chat_page_state"},"type":"automata"}
